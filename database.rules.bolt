isAdmin() {
    auth != null
        && root.child("users").child(auth.uid).child("isAdmin").val() == true
}

isMine(uid) {
    auth != null && auth.uid == uid
}

createOnly(value) {
    prior(value) == null && value != null
}

path /users {
    read() { true }
    write() { isAdmin() }
}

path /state {
    read() { true }
    write() { isAdmin() }
}

path /admin {
    read() { isAdmin() }
    write() { isAdmin() }
}

path /admin/games/{game}/questions/{question} is Question {}
path /admin/games/{game}/questions/{question}/answers/{answer} is Answer {}

path /answers/{game}/{question}/{uid} is Submission {
    read() { isAdmin() || isMine(uid) }
    write() {
        isAdmin() ||
        (
            isMine(uid)
            && createOnly(this)
            && root.child("state").child("kind").val() == "questionOpen"
            && root.child("state").child("gameId").val() == game
            && root.child("state").child("questionId").val() == question
        )
    }
}

type Submission {
    validate() { this.ts == now }

    ts: Number,
    answerId: String
}

type Question {
    validate() { newData.hasChildren(['id']) && newData.child("id").isString() }
}

type Answer {
    id: String,
    text: String
}
